name: "Publish Release"

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [main, test-main]

jobs:
  publish:
    # Only run when a releases/* branch PR is merged to main/test-main
    if: >
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'releases/')
    runs-on: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version and detect test mode
        id: extract_version
        run: |
          set -e
          
          # Extract version from branch name (e.g., releases/6.x.x/6.17.x/6.17.2_rc2 -> 6.17.2)
          BRANCH_PATH=$(echo "${{ github.event.pull_request.head.ref }}" | sed 's|releases/||')
          
          # Get the last part of the path and extract just the version number
          LAST_PART=$(echo "$BRANCH_PATH" | sed 's|.*/||')
          VERSION=$(echo "$LAST_PART" | sed 's|_[a-zA-Z0-9]*$||')
          
          # Detect test mode based on target branch
          TEST_MODE="${{ github.event.pull_request.base.ref == 'test-main' }}"
          
          # Validate version format (X.Y.Z)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ERROR: Invalid version format: $VERSION" >&2
            echo "Expected format: X.Y.Z (e.g., 6.17.2)" >&2
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
          
          echo "Branch path: $BRANCH_PATH"
          echo "Version: $VERSION"
          echo "Test Mode: $TEST_MODE"

      - name: Verify tag exists
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
        run: |
          set -e
          
          # Verify the tag exists (created in Workflow 1)
          if ! git tag -l "$VERSION" | grep -q "$VERSION"; then
            echo "ERROR: Tag $VERSION not found. It should have been created in Workflow 1." >&2
            exit 1
          fi
          
          echo "✅ Tag $VERSION verified"

      - name: Create release artifacts
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
        run: |
          set -e
          
          # Create zip artifacts
          ./scripts/zip_artifacts.sh
          
          echo "✅ Release artifacts created"

      - name: Create GitHub release
        id: create_release
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          TEST_MODE: ${{ steps.extract_version.outputs.test_mode }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          
          # Prepare release title and notes
          TITLE="$VERSION"
          NOTES="Release $VERSION"
          
          if [[ "$TEST_MODE" == "true" ]]; then
            TITLE="[TEST] $TITLE"
            NOTES="[TEST MODE] $NOTES - This is a test release, not for production use."
          fi
          
          # Create release with artifacts
          gh release create "$VERSION" \
            --title "$TITLE" \
            --notes "$NOTES" \
            --draft="$TEST_MODE" \
            purchase-connector-static.xcframework.zip \
            purchase-connector-dynamic.xcframework.zip
          
          # Get release URL
          RELEASE_URL="https://github.com/AppsFlyerSDK/appsflyer-apple-purchase-connector/releases/tag/$VERSION"
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          
          echo "✅ GitHub release created: $RELEASE_URL"

      - name: Publish to CocoaPods
        id: cocoapods
        continue-on-error: true
        # Skip if in test mode
        if: steps.extract_version.outputs.test_mode != 'true'
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          set -e
          
          # Only attempt if we have the token
          if [[ -z "$COCOAPODS_TRUNK_TOKEN" ]]; then
            echo "Skipping CocoaPods publish - no trunk token provided"
            exit 0
          fi
          
          gem install cocoapods
          pod repo update
          pod trunk push PurchaseConnector.podspec --allow-warnings --use-libraries
          
          echo "✅ CocoaPods published successfully"

      - name: Report CocoaPods status
        if: always() && steps.extract_version.outputs.test_mode != 'true'
        run: |
          if [[ "${{ steps.cocoapods.outcome }}" == "success" ]]; then
            echo "✅ CocoaPods: Published successfully"
          else
            echo "❌ CocoaPods: Failed to publish"
            echo "   Manual action required: Run 'pod trunk push PurchaseConnector.podspec' manually"
          fi

      - name: Checkout dynamic repo
        uses: actions/checkout@v3
        with:
          repository: AppsFlyerSDK/PurchaseConnector-Dynamic
          token: ${{ secrets.PC_DYNAMIC_TOKEN }}
          path: dynamic-repo

      - name: Download release artifact
        id: dynamic_pr
        continue-on-error: true
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          cd dynamic-repo
          
          # Download the dynamic XCFramework from the main repo release
          gh release download "$VERSION" \
            --repo AppsFlyerSDK/appsflyer-apple-purchase-connector \
            -p "*dynamic.xcframework.zip"

      - name: Update Package.swift and create tag
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          TEST_MODE: ${{ steps.extract_version.outputs.test_mode }}
          RELEASE_URL: ${{ steps.create_release.outputs.release_url }}
          GITHUB_TOKEN: ${{ secrets.PC_DYNAMIC_TOKEN }}
        run: |
          set -e
          cd dynamic-repo
          
          # Create version branch
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b "release-bump-$VERSION"
          
          # Compute new checksum
          CHECKSUM=$(swift package compute-checksum purchase-connector-dynamic.xcframework.zip)
          
          # Update Package.swift
          sed -i.bak -E \
            -e "s|url: \"[^\"]+\"|url: \"$RELEASE_URL/purchase-connector-dynamic.xcframework.zip\"|" \
            -e "s|checksum: \"[^\"]+\"|checksum: \"$CHECKSUM\"|" \
            Package.swift
          
          # Create tag
          git tag "$VERSION" -m "Release $VERSION"
          
          # Commit and push with tag
          git add Package.swift
          git commit -m "chore: bump to $VERSION"
          git push origin "release-bump-$VERSION" --tags
          
          # Create PR with test mode notice if enabled
          TITLE="chore: bump to $VERSION"
          BODY="Update for release $VERSION"
          
          if [[ "$TEST_MODE" == "true" ]]; then
            TITLE="[TEST] $TITLE"
            BODY="[TEST MODE] $BODY"
          fi
          
          # Create PR
          gh pr create --repo AppsFlyerSDK/PurchaseConnector-Dynamic -B main \
            --title "$TITLE" \
            --body "$BODY"
          
          echo "✅ Dynamic repo PR created with tag"

      - name: Report Dynamic PR status
        if: always()
        run: |
          if [[ "${{ steps.dynamic_pr.outcome }}" == "success" ]]; then
            echo "✅ Dynamic PR: Created successfully"
          else
            echo "❌ Dynamic PR: Failed to create"
            echo "   Manual action required: Create PR manually in PurchaseConnector-Dynamic repo"
          fi

      - name: Workflow Summary
        if: always()
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          TEST_MODE: ${{ steps.extract_version.outputs.test_mode }}
          RELEASE_URL: ${{ steps.create_release.outputs.release_url }}
        run: |
          echo "## Release Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: $([ "$TEST_MODE" == "true" ] && echo "TEST" || echo "PRODUCTION")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # CocoaPods status
          if [[ "$TEST_MODE" == "true" ]]; then
            echo "⏭️ **CocoaPods**: Skipped (test mode)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ steps.cocoapods.outcome }}" == "success" ]]; then
            echo "✅ **CocoaPods**: Published" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **CocoaPods**: Failed - Manual action required" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dynamic PR status
          if [[ "${{ steps.dynamic_pr.outcome }}" == "success" ]]; then
            echo "✅ **Dynamic PR**: Created" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dynamic PR**: Failed - Manual action required" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release**: $RELEASE_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release workflow complete" >> $GITHUB_STEP_SUMMARY 