name: "Workflow 1: Prepare Version Bump"

on:
  # Normal trigger
  pull_request:
    types: [closed]
    branches: [main]
  
  # Test trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to bump (e.g., 6.17.2)'
        required: true
        type: string
      test_mode:
        description: 'Run in test mode (skips CocoaPods)'
        required: false
        type: boolean
        default: false
      manual_approval:
        description: 'Require manual PR approval'
        required: false
        type: boolean
        default: true
      base_branch:
        description: 'Base branch for PR'
        required: false
        type: string
        default: 'main'

jobs:
  setup:
    # Normal trigger condition
    if: >
      (github.event_name == 'pull_request' && 
      github.event.pull_request.merged == true && 
      startsWith(github.event.pull_request.head.ref, 'releases/')) || 
      github.event_name == 'workflow_dispatch'
    runs-on: macos-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      test_mode: ${{ steps.extract_version.outputs.test_mode }}
      manual_approval: ${{ steps.extract_version.outputs.manual_approval }}
      base_branch: ${{ steps.extract_version.outputs.base_branch }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract version and settings
        id: extract_version
        run: |
          set -e
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use workflow_dispatch inputs
            VERSION="${{ github.event.inputs.version }}"
            TEST_MODE="${{ github.event.inputs.test_mode }}"
            MANUAL_APPROVAL="${{ github.event.inputs.manual_approval }}"
            BASE_BRANCH="${{ github.event.inputs.base_branch }}"
          else
            # Extract from branch name
            VERSION=$(echo "${{ github.event.pull_request.head.ref }}" | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            TEST_MODE="false"
            MANUAL_APPROVAL="true"
            BASE_BRANCH="main"
          fi
          
          # Validate version format
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "ERROR: Invalid version format: $VERSION" >&2
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "test_mode=$TEST_MODE" >> $GITHUB_OUTPUT
          echo "manual_approval=$MANUAL_APPROVAL" >> $GITHUB_OUTPUT
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          
          echo "Settings:"
          echo "- Version: $VERSION"
          echo "- Test Mode: $TEST_MODE"
          echo "- Manual Approval: $MANUAL_APPROVAL"
          echo "- Base Branch: $BASE_BRANCH"

      - name: Validate XCFrameworks present
        run: |
          # Verify both XCFrameworks exist
          if [ ! -d PurchaseConnector.xcframework ] || [ ! -d Dynamic/PurchaseConnector.xcframework ]; then
            echo "ERROR: Missing XCFrameworks" >&2
            echo "  - PurchaseConnector.xcframework: $([ -d PurchaseConnector.xcframework ] && echo '✅' || echo '❌')" >&2
            echo "  - Dynamic/PurchaseConnector.xcframework: $([ -d Dynamic/PurchaseConnector.xcframework ] && echo '✅' || echo '❌')" >&2
            exit 1
          fi
          
          echo "✅ XCFrameworks validated"

  create-pr:
    needs: [setup]
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.create_pr.outputs.pr_number }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Git
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          BRANCH_NAME: "release-bump-${{ needs.setup.outputs.version }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

      - name: Create branch and update files
        id: create_pr
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          BRANCH_NAME: "release-bump-${{ needs.setup.outputs.version }}"
          TEST_MODE: ${{ needs.setup.outputs.test_mode }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Debug: Check current directory and git status
          pwd
          ls -la
          git status
          
          # Create branch
          git checkout -b "$BRANCH_NAME"
          
          # Update all files
          ./scripts/update_carthage.sh "$VERSION"
          ./scripts/update_podspec.sh "$VERSION"
          ./scripts/update_spm.sh "$VERSION"
          ./scripts/update_readme.sh "$VERSION"
          
          # Create tag
          git tag -a "$VERSION" -m "Release $VERSION"
          
          # Commit and push
          git add .
          git commit -m "chore: bump version to $VERSION"
          git push origin "$BRANCH_NAME" --tags
          
          # Debug: Check git status after push
          git status
          git branch -a
          
          # Create PR and capture the number
          # Ensure we're in the right directory
          cd $GITHUB_WORKSPACE
          pwd
          git status
          
          PR_NUMBER=$(gh pr create -B main \
            --title "chore: bump version to $VERSION$([ "$TEST_MODE" == "true" ] && echo " [TEST]")" \
            --body "Version bump to $VERSION")
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

  dispatch-to-approval:
    needs: [setup, create-pr]
    runs-on: ubuntu-latest
    steps:
      - name: Trigger approval workflow
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          PR_NUMBER: ${{ needs.create-pr.outputs.pr_number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Dispatch to approval workflow with settings
          gh api repos/${{ github.repository }}/dispatches \
            --field event_type="version_bump_ready" \
            --field client_payload[version]="$VERSION" \
            --field client_payload[outputs][pr_number]="$PR_NUMBER" \
            --field client_payload[outputs][test_mode]="${{ needs.setup.outputs.test_mode }}" \
            --field client_payload[outputs][manual_approval]="${{ needs.setup.outputs.manual_approval }}"

      - name: Summary
        env:
          VERSION: ${{ needs.setup.outputs.version }}
          PR_NUMBER: ${{ needs.create-pr.outputs.pr_number }}
        run: |
          echo "## Workflow 1 Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**PR**: #$PR_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "**Next**: Approval workflow triggered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Ready for approval and merge" >> $GITHUB_STEP_SUMMARY 